{"version":3,"sources":["global-function.js","popup.js","slider.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"main.js","sourcesContent":["//Данный файл содержит общие фунции для стандартных операций над данными\n\n//Убирает все пробелы внутри строки или числа\nfunction deleteSpacesInValue(value) {\n    let newString;\n    newString = value.split(' ').join('');\n\n    return newString\n}\n\n//Удаляет пробелы и значения после последнего пробела\nfunction deleteSingAfterSpace(value) {\n    let newString;\n    newString = value.split(' ').slice(0, -1).join('')\n\n    return newString\n}\n\n//Преобразует дату из маски формата dd.mm.yyyy в формат ISO yyyy-mm-dd\nfunction convertsDateToIsoFormat(date) {\n    let newDate;\n    newDate = date.split('.').reverse().join('-')\n\n    return newDate\n}\n\n//Собирает выбранные значения чекбоксов в строку для отправки на бэк\nfunction collectsCheckedCheckboxToString (checkboxes) {\n    let checkboxCollection = []\n    checkboxes.map(function () {\n        if ($(this).is(':checked')) {\n            checkboxCollection.push($(this).val())\n        }\n    })\n\n    checkboxCollection.join();\n\n    return checkboxCollection\n}\n\n//Запускает прокрутку счетчика\nfunction scrollCounter (counter) {\n    counter.prop('Counter',0).animate({\n        Counter: counter.text()\n    }, {\n        duration: 500,\n        easing: 'swing',\n        step: function (now) {\n            $(this).text(Math.ceil(now).toLocaleString('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }));\n        }\n    });\n}\n\n//Вызывает отправку формы если есть атрибут data-submit и он равен submit\nfunction hasDataAttrSubmit (elem) {\n    if (elem.attr('data-submit') !== undefined && elem.attr('data-submit') === 'submit') {\n        elem.parents('.form').trigger('submit');\n    }\n}\n\n//Возвращает функцию, которая, пока она продолжает вызываться, не будет запускаться.\n//Она будет вызвана один раз через N миллисекунд после последнего вызова.\n//Если передан аргумент `immediate` (true), то она запустится сразу же при первом запуске функции.\n//Пример реализации в файле cell-input строка 11\nfunction debounce(func, wait, immediate) {\n    let timeout;\n\n    return function executedFunction() {\n        const context = this;\n        const args = arguments;\n\n        const later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n\n        const callNow = immediate && !timeout;\n\n        clearTimeout(timeout);\n\n        timeout = setTimeout(later, wait);\n\n        if (callNow) func.apply(context, args);\n    };\n};\n\n//Расчет суммы НДФЛ\nfunction calculationNdfl(prem, installment, termPeriod) {\n    let ndfl;\n    let ndflPerYear;\n\n    if (installment === 0) {\n        ndflPerYear = (prem * 0.13) > 15600 ? 15600 : (prem * 0.13)\n        ndfl = ndflPerYear\n\n        return ndfl\n    } else {\n        ndflPerYear = (prem * installment * 0.13) > 15600 ? 15600 : (prem * installment * 0.13)\n        ndfl = ndflPerYear * termPeriod\n\n        return ndfl\n    }\n}\n\n//Показать прелоадер\nfunction showPreloader() {\n    const preloader = $('.preloader');\n\n    preloader.show();\n}\n\n//Скрыть прелоадер\nfunction hidePreloader() {\n    const preloader = $('.preloader');\n\n    preloader.hide();\n}\n\n//Вывод ошибки формы с бэка и если нужно, блокировка кнопки отправки. Если нужно просто показать ошибки, то вызывать без параметра button\nfunction showErrorFormAndDisabledButton(status, errorBlock, errorText, button) {\n    status === 200 ? errorBlock.slideUp() : errorBlock.html(errorText).slideDown();\n    button !== undefined && (status === 200 ? button.attr('disabled', false) : button.attr('disabled', true))\n}\n\n//Получает кол-во полных лет прошедших с определенной даты. Дату можно указывать в формате (yyyy-mm-dd)\nfunction getAge(dateString) {\n    const today = new Date();\n    const birthDate = new Date(dateString);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n    }\n    return age;\n}\n\n//Перевод строки в вид с первой большой и остальными маленькими буквами (надо потестить)\nfunction getNormalText(str) {\n    str.toLowerCase().replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n}\n\n//Определяет процент от числа\nfunction calculatePercentSum(number, percent) {\n    return (Number(number) * Number(percent))/100\n}\n\n//Добавляет проценты к числу\nfunction addsPercentToNumber(number, percent) {\n    return Number(number) + calculatePercentSum(number, percent)\n}\n\n//Десятичные разделители для input и добавление знака рубля\nfunction addSeparatorAndSing (elem) {\n    const value = elem.val();\n    const number = value.split(' ').join('').replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n    const buffer = elem.parent('.cell__data').find('.cell__sign-buffer');\n    const sign = elem.parent('.cell__data').find('.cell__sign');\n    let ident;\n\n    //Показываем или скрываем денежный знак\n    value.length ? sign.show() : sign.hide()\n\n    //Считаем ширину вводимого числа в буферном блоке\n    ident = buffer.text(number).width() + 28\n\n    //Останавливаем увеличение отступа если значение больше чем ширина инпута\n    if (ident >= (elem.width() + 28)) {\n        ident = elem.width() + 28\n    }\n\n    //Добавляем разделители в введенное число\n    elem.val(number)\n\n    //Добавляем нужный отступ для знака денежного знака\n    sign.css('left', ident)\n}\n","'use strick'\n\nfunction showModalWindow (button) {\n    const popupName = button.attr('data-popup-name');\n    const popup = $(`#${popupName}`);\n    const popupClose = popup.find('.popup__close');\n    const popupActive = $('.popup.popup--active');\n\n    console.log(111, popupName)\n    //Проверяем, есть ли уже открыте popup и если да, то закрываем его\n    if (popupActive.length) {\n        closeModalWindow(popupActive, false);\n    } else {\n        blockBody();\n    }\n\n    //Открываем popup\n    popup.addClass('popup--active');\n\n    //Закрытие popup на крестик\n    popupClose.on('click', function () {\n        closeModalWindow(popup);\n    })\n\n    //Закрытие popup при клике на темную область\n    popup.on('click', function (e) {\n        if (!e.target.closest('.popup__content')) {\n            closeModalWindow(popup);\n        }\n    })\n\n    //Закрытие popup при нажатии esc\n    $(document).on('keydown', function (e) {\n        if (e.keyCode === 27) {\n            closeModalWindow(popup);\n        }\n    })\n}\n\n//Закрывает попап и удаляет обработчик прослушки нажатия клавиш клавиатуры\nfunction closeModalWindow(popup, doUnBlockBody = true) {\n    if (doUnBlockBody) {\n        unBlockBody();\n        popup.removeClass('popup--active');\n        $(document).off('keydown');\n    } else {\n        popup.removeClass('popup--active');\n    }\n}\n\n//Блокируем body с удалением скролла\nfunction blockBody() {\n    const body = document.body;\n    const blockPaddingValue = window.innerWidth - body.clientWidth + 'px';\n\n    body.style.overflow = 'hidden';\n    body.style.paddingRight = blockPaddingValue;\n}\n\n//Разблокирует body\nfunction unBlockBody() {\n    const body = document.body;\n\n    //Разблокируем боди после окончания анимации\n    setTimeout(function () {\n        body.style.overflow = 'visible';\n        body.style.paddingRight = '0';\n    }, 500);\n}\n\n//Вызов popup\n$('button[data-popup-name], a[data-popup-name]').on('click', function () {\n\n    showModalWindow($(this));\n})\n","'use strict';\n\n$(document).ready(function(){\n    $('.slider').slick({\n        dots: true,\n        infinite: true,\n        speed: 300,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        responsive: [\n            {\n                breakpoint: 1024,\n                settings: {\n                    slidesToShow: 3,\n                    slidesToScroll: 3,\n                    infinite: true,\n                    dots: true\n                }\n            },\n            {\n                breakpoint: 600,\n                settings: {\n                    slidesToShow: 2,\n                    slidesToScroll: 2\n                }\n            },\n            {\n                breakpoint: 480,\n                settings: {\n                    slidesToShow: 1,\n                    slidesToScroll: 1\n                }\n            }\n            // You can unslick at a given breakpoint now by adding:\n            // settings: \"unslick\"\n            // instead of a settings object\n        ]\n    });\n});\n"]}